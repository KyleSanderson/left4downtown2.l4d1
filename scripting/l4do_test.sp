/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>
#include "left4downtown.inc"

#define TEST_DEBUG 1
#define TEST_DEBUG_LOG 0


/*
* do not use these natives in your own plugins,
* they are for testing only and probably dont work
*/
//native L4D_SetPaused(bool:paused);
//native L4D_ClearReservationStatus();

new Handle:gConf;

public Plugin:myinfo = 
{
	name = "L4D Downtown's Extension Test",
	author = "Downtown1",
	description = "Ensures functions/offsets are valid and provides some commands to call into natives directly",
	version = "1.0.0.5",
	url = "<- URL ->"
}

new Handle:cvarBlockTanks = INVALID_HANDLE;
new Handle:cvarBlockWitches = INVALID_HANDLE;
new Handle:cvarSetCampaignScores = INVALID_HANDLE;

public OnPluginStart()
{
	gConf = LoadGameConfigFile("left4downtown");
	if(gConf == INVALID_HANDLE)
	{
		DebugPrintToAll("Could not load gamedata/left4downtown.txt");
	}
	
	SearchForOffset("TheDirector"); //fails on Linux
	SearchForOffset("IVEngineServer");  //fails on Linux
	SearchForOffset("ValveRejectServerFullFirst");
	SearchForOffset("ClearTeamScore_A");
	SearchForOffset("ClearTeamScore_B");
	SearchForOffset("IsReserved");
	
	SearchForFunction("TheDirector"); //fails on Windows
	SearchForFunction("IVEngineServer"); //fails on Windows
	SearchForFunction("SetNextMission");
	SearchForFunction("SelectModelByPopulation");
	SearchForFunction("RestartScenarioFromVote");
	SearchForFunction("SpawnTank");
	SearchForFunction("SpawnWitch");
//	SearchForFunction("OnMissionStart");
	SearchForFunction("OnServerShutdown");
	SearchForFunction("ClearReservationStatus");
	SearchForFunction("SetReservationCookie");
	SearchForFunction("MPGameModeChangedConVar");
	SearchForFunction("IsReserved");
	SearchForFunction("TakeOverBot");
	SearchForFunction("SetHumanSpec");
	SearchForFunction("SetCampaignScores");
	SearchForFunction("ClearTeamScores");
	SearchForFunction("GetTeamScore");
	
	/*
	* These searches will fail when slots are patched
	*/
	SearchForFunction("ConnectClientLobbyCheck");
	SearchForFunction("HumanPlayerLimitReached");
	SearchForFunction("GetMaxHumanPlayers");

	//////
	RegConsoleCmd("sm_ir", Command_IsReserved);
	RegConsoleCmd("sm_setpaused", Command_SetPaused);
	RegConsoleCmd("sm_gcs", Command_GetCampaignScores);
	RegConsoleCmd("sm_rs", Command_RestartScenario);
	RegConsoleCmd("sm_rsfv", Command_RestartScenarioFromVote);
	RegConsoleCmd("sm_crs", Command_ClearReservationStatus);

	cvarBlockTanks = CreateConVar("l4do_block_tanks", "0", "Disable ZombieManager::SpawnTank", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_NOTIFY);
	cvarBlockWitches = CreateConVar("l4do_block_witches", "0", "Disable ZombieManager::SpawnWitch", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_NOTIFY);
	cvarSetCampaignScores = CreateConVar("l4do_set_campaign_scores", "0", "Override campaign score if non-0", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_NOTIFY);


}

public Action:L4D_OnSpawnTank(const Float:vector[3], const Float:qangle[3])
{
	DebugPrintToAll("OnSpawnTank(vector[%f,%f,%f], qangle[%f,%f,%f]", 
		vector[0], vector[1], vector[2], qangle[0], qangle[1], qangle[2]);
		
	if(GetConVarBool(cvarBlockTanks))
	{
		DebugPrintToAll("Blocking tank spawn...");
		return Plugin_Handled;
	}
	else
	{
		return Plugin_Continue;
	}
}

public Action:L4D_OnSpawnWitch(const Float:vector[3], const Float:qangle[3])
{
	DebugPrintToAll("OnSpawnWitch(vector[%f,%f,%f], qangle[%f,%f,%f])", 
		vector[0], vector[1], vector[2], qangle[0], qangle[1], qangle[2]);
		
	if(GetConVarBool(cvarBlockWitches))
	{
		DebugPrintToAll("Blocking witch spawn...");
		return Plugin_Handled;
	}
	else
	{
		return Plugin_Continue;
	}
}

public OnMapStart()
{
	//CreateTimer(0.1, Timer_GetCampaignScores, _);
}

public Action:L4D_OnClearTeamScores()
{
	DebugPrintToAll("OnClearTeamScores()"); 
	
	CreateTimer(0.1, Timer_GetCampaignScores, _);
	
	return Plugin_Continue;
}

public Action:Timer_GetCampaignScores(Handle:timer)
{
	Command_GetCampaignScores(0,0);
}

public Action:L4D_OnSetCampaignScores(&scoreA, &scoreB)
{
	DebugPrintToAll("SetCampaignScores(A=%d, B=%d", scoreA, scoreB); 
	
	if(GetConVarInt(cvarSetCampaignScores)) 
	{
		scoreA = GetConVarInt(cvarSetCampaignScores);
		DebugPrintToAll("Overrode with SetCampaignScores(A=%d, B=%d", scoreA, scoreB); 
	}
}

public Action:Command_IsReserved(client, args)
{
	new bool:res = L4D_LobbyIsReserved();
	
	DebugPrintToAll("Lobby is %s reserved...", res ? "" : "NOT");
	
	return Plugin_Handled;
}

public Action:Command_SetPaused(client, args)
{
	DebugPrintToAll("Setting paused...");
	
	decl String:pausedStr[64]
	GetCmdArg(1, pausedStr, sizeof(pausedStr));
	
	L4D_SetPaused(bool:StringToInt(pausedStr));
	//L4D_RestartScenario();
	
	return Plugin_Handled;
}


//unfortunately Director::RestartScenario is inlined on Windows
public Action:Command_RestartScenario(client, args)
{
	DebugPrintToAll("Restarting scenario...");
	//L4D_RestartScenario();
	
	return Plugin_Handled;
}

public Action:Command_GetCampaignScores(client, args)
{
	new scoreA, scoreB;
	
	L4D_GetCampaignScores(scoreA, scoreB);
	DebugPrintToAll("Campaign scores are A=%d, B=%d", scoreA, scoreB);
	
	return Plugin_Handled;
}

public Action:Command_RestartScenarioFromVote(client, args)
{
	decl String:currentmap[128];
	GetCurrentMap(currentmap, sizeof(currentmap));
	
	DebugPrintToAll("Restarting scenario from vote ...");
	L4D_RestartScenarioFromVote(currentmap);
	
	return Plugin_Handled;
}

public Action:Command_ClearReservationStatus(client, args)
{
	DebugPrintToAll("Invoking L4D_LobbyUnreserve() ...");
	//L4D_ClearReservationStatus();
	L4D_LobbyUnreserve();
	
	return Plugin_Handled;
}

SearchForFunction(const String:functionName[])
{
	StartPrepSDKCall(SDKCall_Static);
	if(PrepSDKCall_SetFromConf(gConf, SDKConf_Signature, functionName)) {
		DebugPrintToAll("Function '%s' initialized.", functionName);
	} else {
		DebugPrintToAll("Function '%s' not found.", functionName);
	}
}


	
SearchForOffset(const String:offsetName[])
{
	new offset = GameConfGetOffset(gConf, offsetName);
	DebugPrintToAll("Offset for '%s' is %d", offsetName, offset);
}


DebugPrintToAll(const String:format[], any:...)
{
	#if TEST_DEBUG	|| TEST_DEBUG_LOG
	decl String:buffer[192];
	
	VFormat(buffer, sizeof(buffer), format, 2);
	
	#if TEST_DEBUG
	PrintToChatAll("[TEST-L4DO] %s", buffer);
	PrintToConsole(0, "[TEST-L4DO] %s", buffer);
	#endif
	
	LogMessage("%s", buffer);
	#else
	//suppress "format" never used warning
	if(format[0])
		return;
	else
		return;
	#endif
}